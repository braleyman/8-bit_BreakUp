
//*****************************************************
//*      INLINE DEBUGGER: HIGH LEVEL DESCRIPTION      *
//*****************************************************
//
// Caller 
//      *designates mem locations to start and stop debugging. Stop and start addresses are store in ZP $06 - $07, and $08 - $09, respectively.
//      *caller supplies jsr to debugger, at memory location where debugger resides ($ORG 1000 default)
//
//      EXAMPLE: Caller watches for special key press in main program loop to enter the debugger.
//
// debugger:
//      Standar Ops:
//           *Meant to be used as a subroutine from main loop of executable being debugged.
//           *Will not detect jump to an ISR though, because it's designed to read and execute one instruction at a time using the start and stop memory addresses.
//           *stores register contents from main program before starting.
//           *provides line-by-line execution by
//               - reading next instruction from caller's program
//               - storing instruction in sandbox location
//               - executing instruction
//               - saving register status using monitor's $FF4A subroutine, so register info can be pulled from zp $45 to $49
//               - debugger waits for key press to read and execute next line of code
//           *by default, Ctrl-R will cause the debugger to exit and control is passed back to the main program at next instruction address
//           *this is an inline debugger, so how/where the caller wants to display debug information is up to the caller
//               - caller will provide own interface for displaying debug information, by placing a hook to custom routine at mem locations $1E and $1F.   
//      
//           *provides error code and tone to alert user. Codes are:
//              - 01 = Invalid start and stop address
//              - 02 = Break statement
//              - 03 = jmp indirect to page boundary
//              - 04 = stack overflow
//              - 05 = stack underflow

//           *caller can monitor the error address for error codes and handle accordingly
//      
// - caller's main program loop: {code lines}
//                               {code lines}
//                               -user presses ctrl-D to enter debug
//                                {
//                                  provide start and stop mem locations for debugging, at ZP $06-$09
//                                  provide hook to custom debug display at ZP $1E & $1F
//                                  jsr to debug
//                                }
//                             - loop main
//
// - debug: {save all register contents}
//          {line-by-line code execution in debug sandbox}
//          {sandbox and current registers contain current state for use by caller in displaying on screen}
//          -user presses ctrl-R to resume normal program
//           {
//             reload ZP register locations with values saved at debug entry
//             restore registers
//             return to main program loop
//           }
//        - loop debug

//     6502 only
//
//      Addressing       OpCode            code Hi        code Lo     # bytes      
//    **************************************************************************************     
//      Implied       |  (i.e TAY, PHP) |  0-F  (all)   | 8 A      |  1 byte    
//    **************************************************************************************          
//      Immediate     |  op #$FF        |  0-14 (even)  | 0 2 9    |  2 bytes      
//    **************************************************************************************          
//      Zero Page     |  op $FF         |  0-14 (even)  | 4 5 6    |  2 bytes      
//    **************************************************************************************          
//      Zero Page,X   |  op $FF,X       |  1-F  (odd)   | 4 5 6    |  2 bytes      
//    **************************************************************************************          
//      Zero Page,Y   |  op $FF,Y       |  9 B          | 6        |  2 bytes      
//    **************************************************************************************          
//      Absolute      |  op $FFff       |  0-14 (even)  | 0 C D E  |  3 bytes      
//    **************************************************************************************          
//      Absolute,X    |  op $FFff,X     |  1-F  (odd)   | C D E    |  3 bytes      
//    **************************************************************************************          
//      Absolute,Y    |  op $FFff,Y     |  1-F  (odd)   | 9 E      |  3 bytes      
//    **************************************************************************************          
//      (Indirect,X)  |  op ($FF,X)     |  0-14 (even)  | 1        |  2 bytes      
//    **************************************************************************************          
//      (Indirect),Y  |  op ($FF),Y     |  1-F  (odd)   | 1        |  2 bytes      
//    **************************************************************************************          

// NOTES TO SELF SO I DON'T FORGET WHAT I WAS DOING 3 DAYS AGO!!!
//***********************************************
//*    pseudo code dry run of simple loop       *
//*    
//*    DATE: 2/15/2020
//*
//*    -Need to figure out what to do with loops
//*     and branches.
//*
//***********************************************
//
// Example of a simple loop program that calls the debugger (hook to enter debugger not show in disassembled code)
// pre-conditions:
//      caller sets following mem locations:
//          -ICL = 00 03
//          -lastInst = 0A 03
//
// 
// 0300: 20 58 FC   jsr $FC58
// 0302: A2 FF      ldx #$FF
// 0304: 8E 00 07   stx $0700
// 0307: CA         dex
// 0308: D0 FA      bne $0304
// 030A: 60         rts
//
// Debugger: 
//      - Save register statuses for calling program
//      - Checks start and stop address of program to make sure it's correct
//        - If good, continues to Initialize
//        - If bad, saves 01 to error location and rts back to caller
//      - Initialize:
//          sandboxIndex = #$00
//          jsrCount = #$00
//      
//      How to digest first line, which is a jsr
//      
//      high level process thoughts:
//
//      debugger reads instruction into $9000 and then places an RTS after line to return to debugger and await key press
//      
//      9000: 20 58 FC
//      9003: 60 
//
//      * I know I can't execute the line as is because the JSR will run off and we can't track line-by-line at that point
//        It would return to debugger without the caller knowing what happened during the JSR
//
//      I know that:
//          - ICL points to 0302 after reading in the JSR instruction
//          - sandboxIndex points to 9003, where it placed the RTS operand to return to the debugger
//          - by executing the instruction as is, the stack will look like the following (pretending that a return to debugger is at $1002)
//
//            1FF: 02
//                 10 (re-entry to debugger)
//                   <--- RTS at $9003 will return to 1002
//                 02
//                 90 (re-entry to sandbox)
//                   <--- routine at $FC58 is running and we have no idea what's going on until we return to $9002
//
//
//     **************************************************************************************************
//     *                My original thoughts to over complicate things like I always do!                *
//     **************************************************************************************************
//     What If 
//
//     I read the instruction into debugger, as follows:
//
//     Step 1: first pass from debugger builds the sandbox with JSR to a sandbox location where instructions from the real routine will be executed.
//             Code should NOT be executed at this point because I need to read in first instruction from the routine being called at $FC58.
//
//             9000: 20 04 90 (dummy address)
//             9003: 60 (return to debugger at $1002)
//             9004: instructions for routine at $FC58
//             .
//             . a few passes later, $FC58 has instruction to jump to $F882
//             . no we have the following
//
//             9000: 20 04 90 (dummy address)
//             9003: 60 (return to debugger at $1002)
//             9004: 20 08 09 (dummy address)
//             9007: 60 (Do we need this RTS?)
//             9008: instructions for routine at $F882
//             900B: 60 (return to ???) 
//
//             details:
//                  - Code is not executed
//                  - ICL is pointing to $0302 in real program
//                  - sandboxIndex is pointing to $9003
//                  - debugger needs to read in first instruction from routine being called and store at $9004
//
//             thoughts:
//                  - I want the debugger to read in next instruction from the routine being called NOT the next instrution at $0303
//                  - I can't just set ICL to $FC58 because it would forget to reset to $0303 when the routine is finished.
//                  - I would need some sort of FAKE stack to track where the program is
//                  - How deep does the caller's program go with nested JSR's ??? (can't be certain)
//                  - a normal program would probably overflow the NORMAL stack after ....  128 JSR's ... ish ?
//                  - any program that overflows the stack with that many calls should be re-written anyways, lol.
//                  - Can I get away with using the NORMAL stack?
//
//                    Stack
//                    1FF: 45
//                         03 (I'll assume this is wear the caller jsr'd to the debugger)

//                         02
//                         10 (I'll assume this is the address to return to in the debugger, after I call the sandbox instruction)

//                         02
//                         90 (sandbox calls $9004. That's where the first instruction of $FC58 will be duplicated)

//                         02
//                         03 (pushed from A register. Address I want to assign to ICL when the program returns to 9002)
//                            <-- stack pointer is here while reading in code from routine at $FC58

//                         06
//                         90 (Assume the routine at $FC58 does a JSR to another routine at $F882)

//                         72
//                         FC (pushed from A register. Address I want to assign to ICL when the program returns to $9006)
//                            <-- stack pointer is here wile reading in code from routine at $F882

//       <------------------------------------------------------->                 
//        DOESN'T LOOK RIGHT. I'LL TRY SOMETHING A LITTLE SIMPLER
//       <------------------------------------------------------->
//        
//     **************************************************************************************************
//     *                I finally "uncomplicated" things in my mind                                     *
//     **************************************************************************************************
//       
//        Why should I keep adding new lines of instruction every time the code does a jsr? The stack should do the job for me, right? I just have to be very careful!
//
//        9000: 20 58 FC (No dummy location here. just put the real instruction here, don't execute it, make it available to display, wait for key press)
//        9003: 60 (return to debugger to debugger location $1002. Like in the previous notes)
//
//        0) Stack at this point:
//
//           1FF: 02
//                10 (point to return to in debugger loop)
//
//        1) When debugger sees jump instruction, push ICL to stack for safe keeping.
//
//           IFF: 02
//                10 (point to return to in debugger loop)
//                45
//                03 (last position read from caller's main loop before performing jsr to  $FC58)
//
//        2) Set ICL to jsr location, $FC58.
//
//           IFF: 02
//                10 (point to return to in debugger loop)
//                45
//                03 (PHA last position read from caller's main loop before performing jsr to $FC58)
//                  <-- pointing here while debugger runs line-by-line instruction from $FC58
//
//        3) Merrily read in code from $FC58 routine and place in sandbox at $9000
//
//        4) If another jsr is nested in the current routine, just save ICL to stack... like before.
//
//           IFF: 02
//                10 (points to return location in debugger loop)
//                45
//                03 (last position read from caller's main loop before performing jsr to $FC58)
//                77
//                FC (PHA last position read from routine in $FC58 before jsr to $F882 was reached)
//                  <-- pointing here while debugger runs line-by-line instruction from $F882
//
//        5) Set ICL to new jsr location, $F882. Merrily read in code from $F882 routine and place in sandbox at $9000, just like in notes above.
//
//        6) Any time there's an RTS in the current routine, pull the last location for ICL from stack
//           I can track how to handle an RTS by maintaining a jsrCount. If jsrCount is > 0, PLA to get return address from stack
//           and then subtract one from the jsrCount.
//
//           IFF: 02
//                10 (point to return to in debugger loop)
//                45
//                03 (last position read from caller's main loop before performing jsr to  $FC58)
//                  <-- pointing here because debugger found RTS in statement from $F882 routine and pulled $FC77 off of the stack
//                77
//                FC (last position read from routine in $FC58 before jsr to $F882 was reached)
//                  
//        7) resume any further instructions in first routine called, $FC58
//
//        8) When RTS is reached in $FC58, pull the last location for ICL from stack.. again.
//
//           IFF: 02
//                10 (point to return to in debugger loop)
//                  <-- pointing here because debugger found RTS in statement from $FC58 routine and pulled $0345 off of the stack
//                45
//                03 (last position read from caller's main loop before performing jsr to  $FC58)
//                77
//                FC (last position read from routine in $FC58 before jsr to $F882 was reached)
//
//        9) resume any remaining instructions in caller's main loop
